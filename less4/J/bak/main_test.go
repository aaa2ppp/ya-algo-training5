package main

import (
	"bytes"
	"io"
	"log"
	"math"
	"os"
	"strconv"
	"strings"
	"testing"
)

func Test_run(t *testing.T) {
	type args struct {
		in io.Reader
	}
	tests := []struct {
		name    string
		args    args
		wantOut string
		wantErr bool
		debug   bool
	}{
		{
			"1",
			args{strings.NewReader(`7 7.000
-5 10
-3 4
-1 6
1 -4
4 17
5 3
9 5
12 15
`)},
			`15.8446`,
			false,
			true,
		},
		{
			"2",
			args{strings.NewReader(`1 6495867.567
0 10
10 0
`)},
			`6495872.5669999998`,
			false,
			true,
		},
		{
			"3",
			args{strings.NewReader(`2 1.234
-10 10
0 0
30 49
`)},
			`7.8250490353`,
			false,
			true,
		},
		{
			"8",
			args{strings.NewReader(`38 2345.000
-1000 10000
-980 7800
-950 6500
-900 9000
-850 5500
-820 6567
-800 8000
-790 7567
-760 5000
-750 4556
-700 7000
-650 3578
-600 6000
-550 2578
-500 5001
-450 1500
-400 4123
-350 500
-300 3034
-250 -565
-200 2056
-150 -1500
-100 1000
-50 -2507
0 0
50 -3500
100 -1000
150 -4520
200 -2030
250 -5540
300 -3050
350 -6560
400 -4070
450 -7580
500 -5090
550 -8510
600 -6020
650 -9530
700 -7040
`)},
			`8599.589305`,
			false,
			false,
		},
		{
			"10",
			args{strings.NewReader(`99 1010.000
-9917 0
-9875 -2377
-9581 -3
-9351 -1777
-9149 -6
-9095 -2269
-8890 -9
-8766 -2906
-8565 -12
-8499 -1858
-8399 -15
-8317 -1610
-8141 -18
-7947 -1123
-7902 -21
-7646 -1143
-7377 -24
-7080 -2577
-6907 -27
-6708 -1152
-6637 -30
-6405 -2742
-6158 -33
-5900 -1224
-5886 -36
-5689 -2919
-5490 -39
-5222 -2396
-4946 -42
-4684 -2963
-4534 -45
-4318 -1438
-4096 -48
-4063 -1959
-3771 -51
-3594 -1345
-3490 -54
-3432 -1983
-3357 -57
-3091 -1913
-2909 -60
-2813 -2098
-2670 -63
-2464 -2605
-2340 -66
-2213 -3045
-2160 -4000
-1960 -4001
-1904 -68
-1729 -2877
-1686 -65
-1676 -2472
-1496 -62
-1269 -2946
-1060 -59
-888 -2175
-735 -56
-677 -2208
-485 -53
-371 -2170
-228 -50
-138 -1324
48 -47
244 -2531
489 -44
542 -1792
605 -41
807 -1045
924 -38
1019 -1672
1084 -35
1187 -2580
1274 -32
1313 -2960
1511 -29
1695 -1314
1721 -26
1966 -1330
2042 -23
2277 -1534
2464 -20
2484 -1797
2635 -17
2796 -2305
2839 -14
2904 -2274
3032 -11
3201 -2399
3335 -8
3626 -1025
3919 -5
4217 -2029
4504 -2
4684 -2798
4802 1
5049 -1762
5158 4
5399 -2145
5400 -4500
5966 -4501
`)},
			`2941.0994687214`,
			false,
			false,
		},
		{
			"12",
			args{strings.NewReader(`93 1010.000
-9717 123
-9630 -304
-9548 -356
-9338 -1124
-9204 -952
-8951 -815
-8839 -1328
-8621 -500
-8361 -397
-8103 -227
-8011 463
-7809 1342
-7603 2224
-7318 1730
-7056 2579
-6828 1914
-6768 2181
-6584 1880
-6360 1621
-6112 2325
-5838 1980
-5735 1822
-5686 2184
-5544 2108
-5539 1648
-5447 2204
-5243 2175
-5012 2410
-4739 3026
-4569 3894
-4277 4289
-4126 4397
-3886 4705
-3620 4574
-3405 4712
-3397 4988
-3294 5019
-3273 4769
-3118 5411
-2932 5647
-2819 5034
-2548 5058
-2273 4519
-2132 4049
-1926 3432
-1737 3355
-1605 2643
-1556 3060
-1298 2453
-1004 2934
-784 3423
-554 3437
-502 3176
-261 2674
-39 1960
105 2791
279 2501
345 2287
630 2353
874 2930
1090 2444
1198 2536
1412 1853
1522 2206
1529 1562
1727 865
1911 1569
1959 2192
2218 2941
2433 3281
2702 3345
2854 3615
3086 3472
3299 3593
3592 3441
3734 3869
3950 3940
4064 3556
4362 3835
4631 3336
4765 2947
4939 2925
5069 2474
5355 2232
5621 2298
5734 2350
5981 2000
6071 2013
6258 2172
6475 2550
6613 3380
6846 3266
6971 3514
7180 3571
`)},
			`3729.2129136442`,
			false,
			false,
		},
		{
			"13",
			args{strings.NewReader(`1 6.567
0 0
10 20
`)},
			`16.2074057147`,
			false,
			true,
		},
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			debugEnable = tt.debug
			out := &bytes.Buffer{}
			if err := run(tt.args.in, out); (err != nil) != tt.wantErr {
				t.Errorf("run() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			gotOut := out.String()
			got, err := strconv.ParseFloat(strings.TrimSpace(gotOut), 64)
			if err != nil {
				t.Error(err)
			}
			want, err := strconv.ParseFloat(strings.TrimSpace(tt.wantOut), 64)
			if err != nil {
				t.Fatal(err)
			}
			if math.Abs(want-got) > 1e-4  {
				t.Errorf("run() = %v, want %v", gotOut, tt.wantOut)
			}
		})
	}
}

func _benchmark_runX(b *testing.B, filename string) {
	debugEnable = false
	buf, err := os.ReadFile(filename)
	if err != nil {
		log.Fatal(err)
	}
	for i := 0; i < b.N; i++ {
		run(bytes.NewReader(buf), io.Discard)
	}
}

func Benchmark_run_8(b *testing.B) {
	_benchmark_runX(b, "test8.txt")
}

func Benchmark_run_10(b *testing.B) {
	_benchmark_runX(b, "test10.txt")
}

func Benchmark_run_12(b *testing.B) {
	_benchmark_runX(b, "test12.txt")
}

